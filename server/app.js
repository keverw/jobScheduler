var config = {};var running = false;var version = 0.1;require('./php.js');function checkForValidURL(value){	value = value.replace('localhost', '0.0.0.0');    var urlregex = new RegExp("^((http|https):\/\/)?(www.)?([a-zA-Z0-9]|-)+([.][a-zA-Z0-9(-|\/|=|?#)?]+)+$");    if (urlregex.test(value)) {        return true;    }    return false;}var iniparser = require('iniparser');iniparser.parse('./config.ini', function(err,data){	if (err)	{		console.log('error reading config.ini');		console.log(err);	}	else	{		var hasError = false;		var port = data.port;				if (port === undefined)		{			console.log('You must define a port in the config.ini file.');			hasError = true;		}		else if (isNaN(port))		{			console.log('Port must be a number');			hasError = true;		}		else		{			config.port = port;		}				if (!hasError)		{			startServer();		}	}    });//save filesvar tasksFile = './data/tasks.json';var nextTasksFile = './data/nextTasks.json';var pendingTasksFile = './data/pendingTasks.json';//datavar tasks = {};var nextTasks = {};var pendingTasks = {};//main part of appvar fs = require('fs');loadSaveData = function(){	var returnValue = true;		//load tasks	if (fs.existsSync(tasksFile)) //load	{		var tasks = JSON.parse(fs.readFileSync(tasksFile, 'utf8'));	}	else //save blank file	{		if (!saveDataSync('tasks'))		{			returnValue = false;		}	}		//load nextTasks	if (fs.existsSync(nextTasksFile)) //load	{		var nextTasks = JSON.parse(fs.readFileSync(nextTasksFile, 'utf8'));	}	else //save blank file	{		if (!saveDataSync('nextTasks'))		{			returnValue = false;		}	}		//load pendingTasks	if (fs.existsSync(pendingTasksFile)) //load	{		var pendingTasks = JSON.parse(fs.readFileSync(pendingTasksFile, 'utf8'));	}	else //save blank file	{		if (!saveDataSync('pendingTasks'))		{			returnValue = false;		}	}		return returnValue; //temp}saveData = function (what){	}saveDataSync = function (what){	if (what == 'tasks')	{		fs.writeFileSync(tasksFile, JSON.stringify(tasks), 'utf8');				if (fs.existsSync(tasksFile))		{			return true;		}		else		{			return false;		}	}	else if (what == 'nextTasks')	{		fs.writeFileSync(nextTasksFile, JSON.stringify(nextTasks), 'utf8');				if (fs.existsSync(nextTasksFile))		{			return true;		}		else		{			return false;		}	}	else if (what == 'pendingTasks')	{		fs.writeFileSync(pendingTasksFile, JSON.stringify(pendingTasks), 'utf8');				if (fs.existsSync(pendingTasksFile))		{			return true;		}		else		{			return false;		}	}}startServer = function(){	if (loadSaveData())	{		running = true;		//start task processer				//start taking API calls				var express = require('express');		var app = express();				app.use(express.bodyParser());				app.get('/jobs', function(req, res){		  res.send('hello world');		});				app.post('/addJob', function(req, res){			var outJson = {};			var valid = true;			var errors = {};						var title = trim(req.body.title);			var scriptURL = trim(req.body.scriptURL);			var when = trim(req.body.when);						//validate title			if (title.length > 0)			{				if (title.length > 255)				{					errors.title = 'long';					valid = false;				}			}			else			{				errors.title = 'short';				valid = false;			}						//validate scriptURL			if (!checkForValidURL(scriptURL))			{				errors.url = 'invalid';				valid = false;			}						//validate when			if (when == '')			{				when = 0;			}						if (isNaN(when))			{				errors.when = 'notNumber';				valid = false;			}			else if (when < 1) //must be 1 or higher			{				errors.when = 'notPos';				valid = false;			}			else if (when > 65535)			{				errors.when = 'highPort';				valid = false;			}						//output json			outJson.errors = errors;			res.send(outJson);		});				app.all('*', function (req, res) //404 error - Keep this as the last route		{			//uh 404!			res.send('404');		});				app.listen(config.port);				console.log('server running on port ' + config.port + '. \nCTRL + C to shutdown');	}	else	{		console.log('Error loading saved data.');	}}