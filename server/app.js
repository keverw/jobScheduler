var config = {};var running = false;var version = 0.1;require('./php.js');function checkForValidURL(value){	value = value.replace('localhost', '0.0.0.0');    var urlregex = new RegExp("^((http|https):\/\/)?(www.)?([a-zA-Z0-9]|-)+([.][a-zA-Z0-9(-|\/|=|?#)?]+)+$");    if (urlregex.test(value)) {        return true;    }    return false;}var iniparser = require('iniparser');iniparser.parse('./config.ini', function(err,data){	if (err)	{		console.log('error reading config.ini');		console.log(err);	}	else	{		var hasError = false;		var port = data.port;				if (port === undefined)		{			console.log('You must define a port in the config.ini file.');			hasError = true;		}		else if (isNaN(port))		{			console.log('Port must be a number');			hasError = true;		}		else		{			config.port = port;		}				if (!hasError)		{			startServer();		}	}    });//save filesvar tasksFile = './data/tasks.json';var nextJobsFile = './data/nextJobs.json';var runningJobsFile = './data/runningJobs.json';//datavar tasks = {};var nextJobs = {};var runningJobs = {};//main part of appvar fs = require('fs');loadSaveData = function(){	var returnValue = true;		//load tasks	if (fs.existsSync(tasksFile)) //load	{		tasks = JSON.parse(fs.readFileSync(tasksFile, 'utf8'));	}	else //save blank file	{		if (!saveDataSync('tasks'))		{			returnValue = false;		}	}		//load nextJobs	if (fs.existsSync(nextJobsFile)) //load	{		nextJobs = JSON.parse(fs.readFileSync(nextJobsFile, 'utf8'));	}	else //save blank file	{		if (!saveDataSync('nextJobs'))		{			returnValue = false;		}	}		//load runningJobs	if (fs.existsSync(runningJobsFile)) //load	{		runningJobs = JSON.parse(fs.readFileSync(runningJobsFile, 'utf8'));	}	else //save blank file	{		if (!saveDataSync('runningJobs'))		{			returnValue = false;		}	}		//clean up left over data, just to be safe	for (var jobID in nextJobs)	{	    if (nextJobs.hasOwnProperty(jobID))	    {	    	if (!tasks.hasOwnProperty(jobID))			{				delete nextJobs[jobID];			}	    }	}		for (var jobID in runningJobs)	{	    if (runningJobsFile.hasOwnProperty(jobID))	    {	    	if (!tasks.hasOwnProperty(jobID))			{				delete runningJobsFile[jobID];			}	    }	}		//add in next tasks	for (var jobID in tasks)	{		if (tasks.hasOwnProperty(jobID))	    {	    	if (!nextJobs.hasOwnProperty(jobID))	    	{		    	if (!runningJobsFile.hasOwnProperty(jobID))		    	{		    		var when = tasks[jobID].when;			    	nextJobs[jobID] = time() + when;		    	}	    	}	    }	}		saveData('all');		return returnValue;}saveData = function (what){	if (what == 'tasks')	{		fs.writeFile(tasksFile, JSON.stringify(tasks), 'utf8');	}	else if (what == 'nextJobs')	{		fs.writeFile(nextJobsFile, JSON.stringify(nextJobs), 'utf8');	}	else if (what == 'runningJobs')	{		fs.writeFile(runningJobsFile, JSON.stringify(runningJobs), 'utf8');	}	else if (what == 'all')	{		saveData('tasks');		saveData('nextJobs');		saveData('runningJobs');	}}saveDataSync = function (what){	if (what == 'tasks')	{		fs.writeFileSync(tasksFile, JSON.stringify(tasks), 'utf8');				if (fs.existsSync(tasksFile))		{			return true;		}		else		{			return false;		}	}	else if (what == 'nextJobs')	{		fs.writeFileSync(nextJobsFile, JSON.stringify(nextJobs), 'utf8');				if (fs.existsSync(nextJobsFile))		{			return true;		}		else		{			return false;		}	}	else if (what == 'runningJobs')	{		fs.writeFileSync(runningJobsFile, JSON.stringify(runningJobs), 'utf8');				if (fs.existsSync(runningJobsFile))		{			return true;		}		else		{			return false;		}	}}startServer = function(){	if (loadSaveData())	{		running = true;		//start task processer				//start taking API calls				var express = require('express');		var app = express();				app.use(express.bodyParser());				app.get('/jobs', function(req, res){		  res.send('hello world');		});				app.post('/addJob', function(req, res){			var outJson = {};			var valid = true;			var errors = {};			var info = {};						var title = trim(req.body.title);			var scriptURL = trim(req.body.scriptURL);			var when = +trim(req.body.when);						//validate title			if (title.length > 0)			{				if (title.length > 255)				{					errors.title = 'long';					valid = false;				}			}			else			{				errors.title = 'short';				valid = false;			}						//validate scriptURL						if (scriptURL.length > 0)			{				if (scriptURL.length > 255)				{					errors.url = 'long';					valid = false;				}				else				{					if (!checkForValidURL(scriptURL))					{						errors.url = 'invalid';						valid = false;					}				}			}			else			{				errors.url = 'short';				valid = false;			}						//validate when			if (isNaN(when))			{				errors.when = 'notNumber';				valid = false;			}			else if (when < 0) //be 0 or higher			{				errors.when = 'notPos';				valid = false;			}						if (valid) //start adding to task list			{				var jobID = md5(scriptURL);								if (tasks.hasOwnProperty(jobID))				{					errors.err = 'already';				}				else				{					info.jobID = jobID;										tasks[jobID] = {						title: title,						url: scriptURL,						when: when,						added: time()					};										saveData('tasks');										if (when > 0)					{						nextJobs[jobID] = time() + when;						saveData('nextJobs');					}										info.success = 'added';				}							}						//output json			outJson.errors = errors;			outJson.info = info;			res.send(outJson);		});				app.all('*', function (req, res) //404 error - Keep this as the last route		{			//uh 404!			res.send('404');		});				app.listen(config.port);				console.log('server running on port ' + config.port + '. \nCTRL + C to shutdown');	}	else	{		console.log('Error loading saved data.');	}}